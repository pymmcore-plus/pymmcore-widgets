{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>pymmcore-widgets (github) is a library of PyQt/PySide widgets that can be used in combination with pymmcore-plus (github) to create custom Graphical User Interfaces (GUIs) for the Micro-Manager software in a pure python/C++ environment.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pymmcore-widgets\n</code></pre> <p>This package does NOT include a PyQt/PySide backend, you must install one yourself (e.g. <code>pip install PyQt6</code>).</p> <p>It also requires the <code>Micro-Manager</code> device adapters and C++ core provided by mmCoreAndDevices.</p> <p>For a more detailed description on how to install the package, see the Getting Started section.</p>"},{"location":"#usage","title":"Usage","text":"<p>As a quick example, let's create a simple Qt Application that:</p> <ul> <li> <p>creates a Micro-Manager core instance so that all the widgets can control the same core.</p> </li> <li> <p>loads the default <code>Micro-Manager</code> system configuration.</p> </li> <li> <p>creates and shows a PropertyBrowser widget. You can use this widget to view and modify the properties of any of the loaded devices.</p> </li> </ul> <pre><code># import the necessary packages\nfrom qtpy.QtWidgets import QApplication\nfrom pymmcore_plus import CMMCorePlus\nfrom pymmcore_widgets import PropertyBrowser\n\n# create a QApplication\napp = QApplication([])\n\n# create a CMMCorePlus instance\nmmc = CMMCorePlus.instance()\n\n# load the default Micro-Manager system configuration. To load a specific \n# configuration, provide the \"path/to/config.cfg\" file as an argument.\nmmc.loadSystemConfiguration()\n\n# create a PropertyBrowser widget. By default, this widget will use the active\n# Micro-Manager core instance.\npb_widget = PropertyBrowser()\n\n# show the created widget\npb_widget.show()\n\napp.exec_()\n</code></pre> <p>The code above will create a Qt Application that looks like this:</p> <p></p> <p>A more detailed description on how to use the <code>pymmcore-widgets</code> package is explained in the Getting Started section.</p> <p>For a pre-made user interface, see napari-micromanager (github).</p>"},{"location":"#widgets","title":"Widgets","text":"<p>For a complete list of widgets offered by this package, see the Widgets List.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Thanks for thinking of a way to help improve this library!</p> <p>Remember that contributions come in all shapes and sizes beyond writing bug fixes. Contributing to documentation, opening new issues for bugs, asking for clarification on things you find unclear or requesting new features, are all super valuable contributions.</p> <p>You can do any of the above by opening a new issues or by submitting a pull request on the GitHub repository for this project.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#getting-started","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":""},{"location":"getting_started/#installing-pymmcore-widgets","title":"Installing pymmcore-widgets","text":"<p>You can install the latest release of pymmcore-widgets using pip:</p> <pre><code>pip install pymmcore-widgets\n</code></pre>"},{"location":"getting_started/#installing-pyqt-or-pyside","title":"Installing PyQt or PySide","text":"<p>Since pymmcore-widgets relies on either the PyQt or PySide libraries, you also need to install one of these packages. You can use any of the available versions of these libraries: PyQt5, PyQt6, PySide2 or PySide6.  We strongly recommend using PyQt6 if possible.  If you must use a specific backend version and run into problems, please open an issue</p> <p>For example, to install PyQt6, you can use:</p> <pre><code>pip install PyQt6\n</code></pre> <p>Note</p> <p>Widgets are tested on:</p> <ul> <li>macOS &amp; Windows</li> <li>Python 3.9 and above</li> <li>PyQt5, PyQt6, PySide2 &amp; PySide6(==6.7)</li> </ul>"},{"location":"getting_started/#installing-micro-manager","title":"Installing Micro-Manager","text":"<p>The installation of the <code>pymmcore-widgets</code> package automatically includes pymmcore-plus, as it is a key dependency for <code>pymmcore-widgets</code>. However, you still need to install the <code>Micro-Manager</code> device adapters and C++ core provided by mmCoreAndDevices. This can be done by following the steps described in the <code>pymmcore-plus</code> documentation page.</p>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>For a deeper understanding of each widget's functionality, refer to their individual documentation pages, where we provide short examples of usage.</p>"},{"location":"getting_started/#basic-usage","title":"Basic usage","text":"<p>As shown in the example from the Overview section, for a basic usage of any of the widgets we need to:</p> <ol> <li>create a Qt Application.</li> <li>create a Micro-Manager core instance so that all the widgets will control the same core.</li> <li>load a configuration file.</li> <li>create and show the wanted widget(s).</li> </ol> <p>In this example, we substitute step 3 with the ConfigurationWidget widget which enables us to load any <code>Micro-Manager</code> configuration file. Additionally, we use the GroupPresetTableWidget widget, which provides an interactive interface for the <code>groups</code> and <code>presets</code> stored in the configuration file.</p> basic_usage.py<pre><code># import the necessary packages\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ConfigurationWidget, GroupPresetTableWidget\n\n# create a QApplication\napp = QApplication([])\n\n# create a CMMCorePlus instance.\nmmc = CMMCorePlus.instance()\n\n# create a ConfigurationWidget\ncfg_widget = ConfigurationWidget()\n\n# create a GroupPresetTableWidget\ngp_widget = GroupPresetTableWidget()\n\n# show the created widgets\ncfg_widget.show()\ngp_widget.show()\n\napp.exec_()\n</code></pre> <p>The code above will create a Qt Application with the <code>ConfigurationWidget</code> and <code>GroupPresetTableWidget</code>:</p> <p></p> <p>Choosing a <code>Micro-Manager</code> core</p> <p>Most widgets, by default, utilize the global singleton core or instantiate a new one if none exists. Once instantiated, the global singleton core can be accessed using <code>CMMCorePlus.instance()</code>. This eliminates the need for manual core instance creation.</p> <p>For example, in the case above, the <code>ConfigurationWidget</code> is the first widget to be instantiated and it will automatically create a new core instance. This makes the <code>mmc = CMMCorePlus.instance()</code> line redundant and removable.</p> <p>However, if a specific core instance is required, you can create a core instance first and then pass it as the <code>mmcore</code> argument to the widget (if available, not all the widgets have it), like so: <code>GroupPresetTableWidget(mmcore=my_core)</code>.</p> <p>You can add to this simple code any other widgets from this package to control and interact with the same Micro-Manager core instance.</p>"},{"location":"getting_started/#custom-gui","title":"Custom GUI","text":"<p>Creating a custom GUI with the widgets from this package requires a deeper understanding of the Qt environment, such as PyQt6. However, this documentation does not primarily focus on this aspect.</p> <p>As shown in the video below, in this section, we only provide a simple example to illustrate the process of building a custom GUI using some of the <code>pymmcore-widgets</code>.</p> <p></p> <p>Here we create a Qt Application with a general-purpose QWidget that incorporates a variety of <code>pymmcore-widgets</code>: ConfigurationWidget, ChannelGroupWidget, ChannelWidget, DefaultCameraExposureWidget, ImagePreview, SnapButton, and LiveButton.</p> <p>This simple GUI can be used to load a <code>Micro-Manager</code> configuration file, snap an image or live stream images from the camera, with the flexibility to select a channel and adjust the exposure time.</p> custom_gui.py<pre><code># Import the necessary packages\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QGridLayout, QWidget\n\nfrom pymmcore_widgets import (\n    ChannelGroupWidget,\n    ChannelWidget,\n    ConfigurationWidget,\n    DefaultCameraExposureWidget,\n    ImagePreview,\n    LiveButton,\n    SnapButton,\n)\n\n\n# Create a QWidget class named MyWidget\nclass MyWidget(QWidget):\n    \"\"\"An example QWidget that uses some of the widgets in pymmcore_widgets.\"\"\"\n\n    def __init__(self, parent: QWidget | None = None):\n        super().__init__(parent=parent)\n\n        # This is not strictly necessary but we can create a Micro-Manager core\n        # instance so that all the widgets can control the same core. If you don't\n        # create a core instance, the first widget to be instantiated will create\n        # a new core instance.\n        CMMCorePlus.instance()\n\n        # Create the wanted pymmcore_widgets\n        cfg = ConfigurationWidget()\n        ch_group_combo = ChannelGroupWidget()\n        ch_combo = ChannelWidget()\n        exp = DefaultCameraExposureWidget()\n        preview = ImagePreview()\n        snap = SnapButton()\n        live = LiveButton()\n\n        # Create the layout for MyWidget\n        # In Qt, a `layout` (https://doc.qt.io/qt-6/layout.html) is used to add\n        # widgets to a `QWidget`. For this example, we'll employ a\n        # `QGridLayout` (https://doc.qt.io/qt-6/qgridlayout.html) to organize the\n        # widgets in a grid-like arrangement.\n        layout = QGridLayout(self)\n\n        # Add the wanted pymmcore_widgets to the layout.\n        # The first two arguments of 'addWidget' specify the grid position\n        # in terms of rows and columns. The third and fourth arguments\n        # define the span of the widget across multiple rows and columns.\n        layout.addWidget(cfg, 0, 0, 1, 3)\n        layout.addWidget(ch_group_combo, 1, 0)\n        layout.addWidget(ch_combo, 1, 1)\n        layout.addWidget(exp, 1, 2)\n        layout.addWidget(preview, 2, 0, 1, 3)\n        layout.addWidget(snap, 3, 1)\n        layout.addWidget(live, 3, 2)\n\n\n# Create a QApplication and show MyWidget\nif __name__ == \"__main__\":\n    from qtpy.QtWidgets import QApplication\n\n    app = QApplication([])\n    widget = MyWidget()\n    widget.show()\n    app.exec_()\n</code></pre> <p>For a pre-made user interface, see napari-micromanager (github).</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"troubleshooting/#no-qt-bindings","title":"No Qt bindings","text":"<pre><code>qtpy.QtBindingsNotFoundError: No Qt bindings could be found\n</code></pre> <p>If you get an error similar to the one above, it means that you did not install one of the necessary PyQt or PySide libraries (for example, you can run <code>pip install PyQt6</code> to install PyQt6).</p> <p>See the Installing PyQt or PySide section for more details.</p>"},{"location":"widgets/","title":"Widgets","text":""},{"location":"widgets/#widgets-list","title":"Widgets List","text":"<p>Below there is a list of all the widgets available in this package grouped by their functionality.</p>"},{"location":"widgets/#camera-widgets","title":"Camera Widgets","text":"<p>The widgets in this section can be used to control any <code>Micro-Manager</code> device of type CameraDevice.</p> Widget Description CameraRoiWidget A Widget to control the camera device ROI. DefaultCameraExposureWidget A Widget to get/set exposure on the default camera. ExposureWidget A Widget to get/set exposure on a camera."},{"location":"widgets/#configuration-widgets","title":"Configuration Widgets","text":"<p>The widgets in this section can be used to create, load and modify a Micro-Manager configuration file.</p> Widget Description ConfigWizard Hardware Configuration Wizard for Micro-Manager. ConfigurationWidget A Widget to select and load a micromanager system configuration. GroupPresetTableWidget A Widget to create, edit, delete and set micromanager group presets. InstallWidget Widget to manage installation of MicroManager. ObjectivesPixelConfigurationWidget A Widget to define the pixel size configurations using the objective device. PixelConfigurationWidget A Widget to define the pixel size configurations. PresetsWidget A Widget to create a QCombobox containing the presets of the specified group."},{"location":"widgets/#devices-and-properties-widgets","title":"Devices and Properties Widgets","text":"<p>The widgets in this section can be used to control and intract with the devices and properties of a <code>Micro-Manager</code> core (CMMCorePlus).</p> Widget Description PropertiesWidget Convenience container to control a specific set of PropertyWidgets. PropertyBrowser A Widget to browse and change properties of all devices. PropertyWidget A widget to display and control a specified mmcore device property."},{"location":"widgets/#multi-dimensional-acquisition-widgets","title":"Multi-Dimensional Acquisition Widgets","text":"<p>The widgets in this section can be used to define (and run) a multi-dimensional acquisition based on the useq-schema MDASequence.</p> Widget Description ChannelTable Table to edit a list of useq.Channels. GridPlanWidget Widget to edit a <code>useq-schema</code> GridPlan. MDASequenceWidget A widget that provides a GUI to construct and edit a <code>useq.MDASequence</code>. MDAWidget Main MDA Widget connected to a <code>pymmcore_plus.CMMCorePlus</code> instance. PositionTable Table to edit a list of useq.Position. TimePlanWidget Table to edit a useq.TimePlan. ZPlanWidget Widget to edit a useq.ZPlan."},{"location":"widgets/#shutter-widgets","title":"Shutter Widgets","text":"<p>The widgets in this section can be used to control any <code>Micro-Manager</code> ShutterDevice.</p> Widget Description ShuttersWidget A Widget to control shutters and Micro-Manager autoshutter."},{"location":"widgets/#stage-widgets","title":"Stage Widgets","text":"<p>The widgets in this section can be used to control any <code>Micro-Manager</code> StageDevice.</p> Widget Description StageWidget A Widget to control a XY and/or a Z stage."},{"location":"widgets/#misc-widgets","title":"Misc Widgets","text":"<p>The widgets in this section are miscellaneous widgets that can be used for different purposes.</p> Widget Description ChannelGroupWidget A QComboBox to follow and control Micro-Manager ChannelGroup. ChannelWidget A QComboBox to select which micromanager channel configuration to use. CoreLogWidget High-performance log console with pause, follow-tail, clear, and initial load. ImagePreview A Widget that displays the last image snapped by active core. LiveButton A Widget to create a two-state (on-off) live mode QPushButton. ObjectivesWidget A QComboBox-based Widget to select the microscope objective. SnapButton Create a snap QPushButton."},{"location":"widgets/CameraRoiWidget/","title":"CameraRoiWidget","text":"This image generated from example code below."},{"location":"widgets/CameraRoiWidget/#pymmcore_widgets.CameraRoiWidget","title":"<code>CameraRoiWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to control the camera device ROI.</p> <p>When the ROI changes, the <code>roiChanged</code> Signal is emitted with the current ROI (x, y, width, height, comboBoxText)</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/CameraRoiWidget/#pymmcore_widgets.CameraRoiWidget.value","title":"<code>value() -&gt; dict[str, CameraInfo]</code>","text":"<p>Return the camera information dict.</p>"},{"location":"widgets/CameraRoiWidget/#example","title":"Example","text":"camera_roi_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import CameraRoiWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\n# this widget supports multiple camera devices\nmmc.loadDevice(\"Camera2\", \"DemoCamera\", \"DCam\")\nmmc.initializeDevice(\"Camera2\")\n\ncam_roi_wdg = CameraRoiWidget()\ncam_roi_wdg.show()\n\napp.exec()\n</code></pre>"},{"location":"widgets/ChannelGroupWidget/","title":"ChannelGroupWidget","text":"This image generated from example code below."},{"location":"widgets/ChannelGroupWidget/#pymmcore_widgets.ChannelGroupWidget","title":"<code>ChannelGroupWidget</code>","text":"<p>               Bases: <code>QComboBox</code></p> <p>A QComboBox to follow and control Micro-Manager ChannelGroup.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ChannelGroupWidget/#example","title":"Example","text":"channel_group_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ChannelGroupWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nch_group_wdg = ChannelGroupWidget()\nch_group_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ChannelTable/","title":"ChannelTable","text":"This image generated from example code below."},{"location":"widgets/ChannelTable/#pymmcore_widgets.ChannelTable","title":"<code>ChannelTable</code>","text":"<p>               Bases: <code>DataTableWidget</code></p> <p>Table to edit a list of useq.Channels.</p>"},{"location":"widgets/ChannelTable/#pymmcore_widgets.ChannelTable.channelGroups","title":"<code>channelGroups() -&gt; Mapping[str, Sequence[str]]</code>","text":"<p>Return the current channel groups that can be selected in the table.</p>"},{"location":"widgets/ChannelTable/#pymmcore_widgets.ChannelTable.setChannelGroups","title":"<code>setChannelGroups(groups: Mapping[str, Sequence[str]] | None) -&gt; None</code>","text":"<p>Set the channel groups that can be selected in the table.</p> <p>Parameters:</p> Name Type Description Default <code>groups</code> <code>Mapping[str, Sequence[str]]</code> <p>A mapping of group names to a sequence of config names.</p> required"},{"location":"widgets/ChannelTable/#pymmcore_widgets.ChannelTable.setValue","title":"<code>setValue(value: Iterable[useq.Channel]) -&gt; None</code>","text":"<p>Set the current value of the table from an Iterable of useq.Channels.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Iterable[Channel]</code> <p>An Iterable of useq.Channels.</p> required"},{"location":"widgets/ChannelTable/#pymmcore_widgets.ChannelTable.value","title":"<code>value(exclude_unchecked: bool = True) -&gt; tuple[useq.Channel, ...]</code>","text":"<p>Return the current value of the table as a tuple of useq.Channels.</p> <p>Parameters:</p> Name Type Description Default <code>exclude_unchecked</code> <code>bool</code> <p>Exclude unchecked rows, by default True</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[Channel, ...]</code> <p>A tuple of useq.Channels.</p>"},{"location":"widgets/ChannelTable/#example","title":"Example","text":"channel_table.py<pre><code>\"\"\"Example usage of the ChannelTable class.\n\nCheck also the 'mda_widget.py' example to see the ChannelTable\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ChannelTable\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nch_table_wdg = ChannelTable(rows=1)\nch_table_wdg.setChannelGroups({\"Channel\": [\"DAPI\", \"FITC\"]})\nch_table_wdg.resize(500, 200)\nch_table_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ChannelWidget/","title":"ChannelWidget","text":"This image generated from example code below."},{"location":"widgets/ChannelWidget/#pymmcore_widgets.ChannelWidget","title":"<code>ChannelWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A QComboBox to select which micromanager channel configuration to use.</p> <p>Parameters:</p> Name Type Description Default <code>channel_group</code> <code>str | None</code> <p>Name of the micromanager group defining the microscope channels. By default, it will be guessed using the <code>CMMCorePlus.getOrGuessChannelGroup</code> method and a choice dialog will be presented if there are multiple options. This method looks for a group configuration name matching the default regex <code>re.compile(\"(chan{1,2}(el)?|filt(er)?)s?\", re.IGNORECASE)</code>. A different string/regex can be set using the <code>CMMCorePlus.channelGroup_pattern</code> method.</p> <code>None</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>ChannelWidget</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/ChannelWidget/#example","title":"Example","text":"channel_widget.py<pre><code>\"\"\"Example usage of the ChannelWidget class.\n\nCheck also the 'image_widget.py' example to see the ChannelWidget\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ChannelWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nch_wdg = ChannelWidget()\nch_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ConfigWizard/","title":"ConfigWizard","text":"This image generated from example code below."},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard","title":"<code>ConfigWizard</code>","text":"<p>               Bases: <code>QWizard</code></p> <p>Hardware Configuration Wizard for Micro-Manager.</p> <p>It can be used to create a new configuration file or edit an existing one.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>Path to a configuration file to load, by default \"\".</p> <code>''</code> <code>core</code> <code>CMMCorePlus</code> <p>A CMMCorePlus instance, by default, uses the global singleton.</p> <code>None</code> <code>parent</code> <code>QWidget</code> <p>The parent widget, by default None.</p> <code>None</code>"},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard.accept","title":"<code>accept() -&gt; None</code>","text":"<p>Accept the wizard and save the configuration to a file.</p>"},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard.closeEvent","title":"<code>closeEvent(event: QCloseEvent | None) -&gt; None</code>","text":"<p>Called when the window is closed.</p>"},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard.microscopeModel","title":"<code>microscopeModel() -&gt; Microscope</code>","text":"<p>Return the microscope model.</p>"},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard.reject","title":"<code>reject() -&gt; None</code>","text":"<p>Reject the wizard and reload the prior configuration.</p>"},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard.save","title":"<code>save(path: str | Path) -&gt; None</code>","text":"<p>Save the configuration to a file.</p>"},{"location":"widgets/ConfigWizard/#pymmcore_widgets.ConfigWizard.sizeHint","title":"<code>sizeHint() -&gt; QSize</code>","text":"<p>Return the size hint for the wizard.</p>"},{"location":"widgets/ConfigWizard/#example","title":"Example","text":"config_wizard.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets.hcwizard.config_wizard import ConfigWizard\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwiz = ConfigWizard()\nwiz.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ConfigurationWidget/","title":"ConfigurationWidget","text":"This image generated from example code below."},{"location":"widgets/ConfigurationWidget/#pymmcore_widgets.ConfigurationWidget","title":"<code>ConfigurationWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to select and load a micromanager system configuration.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ConfigurationWidget/#example","title":"Example","text":"configuration_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ConfigurationWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ncfg_wdg = ConfigurationWidget()\ncfg_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/CoreLogWidget/","title":"CoreLogWidget","text":"This image generated from example code below."},{"location":"widgets/CoreLogWidget/#pymmcore_widgets.CoreLogWidget","title":"<code>CoreLogWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>High-performance log console with pause, follow-tail, clear, and initial load.</p>"},{"location":"widgets/CoreLogWidget/#pymmcore_widgets.CoreLogWidget.clear","title":"<code>clear() -&gt; None</code>","text":"<p>Clear the log view.</p>"},{"location":"widgets/CoreLogWidget/#pymmcore_widgets.CoreLogWidget.closeEvent","title":"<code>closeEvent(event: QCloseEvent | None) -&gt; None</code>","text":"<p>Clean up thread on close.</p>"},{"location":"widgets/CoreLogWidget/#example","title":"Example","text":"core_log_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import CoreLogWidget\n\napp = QApplication([])\ncore = CMMCorePlus()\n\nwdg = CoreLogWidget(mmcore=core)\nwdg.clear()\nwdg.show()\n\ncore.loadSystemConfiguration()\napp.exec()\n</code></pre>"},{"location":"widgets/DefaultCameraExposureWidget/","title":"DefaultCameraExposureWidget","text":"This image generated from example code below."},{"location":"widgets/DefaultCameraExposureWidget/#pymmcore_widgets.DefaultCameraExposureWidget","title":"<code>DefaultCameraExposureWidget</code>","text":"<p>               Bases: <code>ExposureWidget</code></p> <p>A Widget to get/set exposure on the default camera.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <pre><code>Optional parent widget. By default, None.\n</code></pre> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/DefaultCameraExposureWidget/#pymmcore_widgets.DefaultCameraExposureWidget.setCamera","title":"<code>setCamera(camera: str | None = None, force: bool = False) -&gt; None</code>","text":"<p>Set which camera this widget tracks.</p> <p>Using this on the <code>DefaultCameraExposureWidget</code>widget may cause unexpected behavior, instead try to use an <code>ExposureWidget</code>.</p> <p>Parameters:</p> Name Type Description Default <code>camera</code> <code>str</code> <p>The camera device label. By default, None. If not specified, the widget will use the current Camera device.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Whether to force a change away from tracking the default camera.</p> <code>False</code>"},{"location":"widgets/DefaultCameraExposureWidget/#example","title":"Example","text":"default_camera_exposure_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import DefaultCameraExposureWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nexp_wdg = DefaultCameraExposureWidget()\nexp_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ExposureWidget/","title":"ExposureWidget","text":"This image generated from example code below."},{"location":"widgets/ExposureWidget/#pymmcore_widgets.ExposureWidget","title":"<code>ExposureWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to get/set exposure on a camera.</p> <p>Parameters:</p> Name Type Description Default <code>camera</code> <code>str</code> <p>The camera device label. By default, None. If not specified, the widget will use the current Camera device.</p> <code>None</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance()</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>ExposureWidget</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/ExposureWidget/#pymmcore_widgets.ExposureWidget.setCamera","title":"<code>setCamera(camera: str | None = None) -&gt; None</code>","text":"<p>Set which camera this widget tracks.</p> <p>Parameters:</p> Name Type Description Default <code>camera</code> <code>str</code> <p>The camera device label. By default, None. If not specified, the widget will use the current Camera device.</p> <code>None</code>"},{"location":"widgets/ExposureWidget/#example","title":"Example","text":"exposure_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ExposureWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nexp_wdg = ExposureWidget()\nexp_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/GridPlanWidget/","title":"GridPlanWidget","text":"This image generated from example code below."},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget","title":"<code>GridPlanWidget</code>","text":"<p>               Bases: <code>QScrollArea</code></p> <p>Widget to edit a <code>useq-schema</code> GridPlan.</p>"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.fovHeight","title":"<code>fovHeight() -&gt; float | None</code>","text":"<p>Return the current field of view height.</p>"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.fovWidth","title":"<code>fovWidth() -&gt; float | None</code>","text":"<p>Return the current field of view width.</p>"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.mode","title":"<code>mode() -&gt; Mode</code>","text":"<p>Return the current mode, one of \"number\", \"area\", or \"bounds\".</p>"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.setFovHeight","title":"<code>setFovHeight(value: float) -&gt; None</code>","text":"<p>Set the current field of view height.</p>"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.setFovWidth","title":"<code>setFovWidth(value: float) -&gt; None</code>","text":"<p>Set the current field of view width.</p>"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.setMode","title":"<code>setMode(mode: Mode | Literal['number', 'area', 'bounds', 'polygon']) -&gt; None</code>","text":"<p>Set the current mode, one of \"number\", \"area\", \"bounds\", or \"polygon\".</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>Mode | Literal['number', 'area', 'bounds', 'polygon']</code> <p>The mode to set.</p> required"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.setValue","title":"<code>setValue(value: GridPlan) -&gt; None</code>","text":"<p>Set the current value of the widget from a <code>useq-schema</code> GridPlan.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>GridFromEdges | GridRowsColumns | GridWidthHeight | GridFromPolygon</code> <p>The <code>useq-schema</code> GridPlan to set.</p> required"},{"location":"widgets/GridPlanWidget/#pymmcore_widgets.GridPlanWidget.value","title":"<code>value() -&gt; GridPlan</code>","text":"<p>Return the current value of the widget as a <code>useq-schema</code> GridPlan.</p> <p>Returns:</p> Type Description <code>GridFromEdges | GridRowsColumns | GridWidthHeight</code> <p>The current GridPlan value of the widget.</p>"},{"location":"widgets/GridPlanWidget/#example","title":"Example","text":"grid_plan_widget.py<pre><code>\"\"\"Example usage of the GridPlanWidget class.\n\nCheck also the 'position_table.py' and 'mda_widget.py' examples to see the\nGridPlanWidget used in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import GridPlanWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ngrid_wdg = GridPlanWidget()\ngrid_wdg.valueChanged.connect(print)\ngrid_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/GroupPresetTableWidget/","title":"GroupPresetTableWidget","text":"This image generated from example code below."},{"location":"widgets/GroupPresetTableWidget/#pymmcore_widgets.GroupPresetTableWidget","title":"<code>GroupPresetTableWidget</code>","text":"<p>               Bases: <code>QGroupBox</code></p> <p>A Widget to create, edit, delete and set micromanager group presets.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance()</code>.</p> <code>None</code>"},{"location":"widgets/GroupPresetTableWidget/#example","title":"Example","text":"group_preset_table_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import GroupPresetTableWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ngroup_preset_wdg = GroupPresetTableWidget()\ngroup_preset_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ImagePreview/","title":"ImagePreview","text":"This image generated from example code below."},{"location":"widgets/ImagePreview/#pymmcore_widgets.ImagePreview","title":"<code>ImagePreview</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget that displays the last image snapped by active core.</p> <p>This widget will automatically update when the active core snaps an image, when the active core starts streaming or when a Multi-Dimensional Acquisition is running.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <code>use_with_mda</code> <code>bool</code> <p>If False, the widget will not update when a Multi-Dimensional Acquisition is running. By default, True.</p> <code>True</code>"},{"location":"widgets/ImagePreview/#pymmcore_widgets.ImagePreview.clims","title":"<code>clims: tuple[float, float] | Literal['auto']</code>  <code>property</code> <code>writable</code>","text":"<p>Get the contrast limits of the image.</p>"},{"location":"widgets/ImagePreview/#pymmcore_widgets.ImagePreview.cmap","title":"<code>cmap: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get the colormap (lookup table) of the image.</p>"},{"location":"widgets/ImagePreview/#pymmcore_widgets.ImagePreview.use_with_mda","title":"<code>use_with_mda: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Get whether the widget should update when a MDA is running.</p>"},{"location":"widgets/ImagePreview/#example","title":"Example","text":"image_preview.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication, QGroupBox, QHBoxLayout, QVBoxLayout, QWidget\n\nfrom pymmcore_widgets import (\n    ChannelWidget,\n    ExposureWidget,\n    ImagePreview,\n    LiveButton,\n    SnapButton,\n)\n\n\nclass ImageFrame(QWidget):\n    \"\"\"An example widget with a snap/live button and an image preview.\"\"\"\n\n    def __init__(self, parent: QWidget | None = None) -&gt; None:\n        super().__init__(parent)\n\n        self.preview = ImagePreview()\n        self.snap_button = SnapButton()\n        self.live_button = LiveButton()\n        self.exposure = ExposureWidget()\n        self.channel = ChannelWidget()\n\n        self.setLayout(QVBoxLayout())\n\n        buttons = QGroupBox()\n        buttons.setLayout(QHBoxLayout())\n        buttons.layout().addWidget(self.snap_button)\n        buttons.layout().addWidget(self.live_button)\n\n        ch_exp = QWidget()\n        layout = QHBoxLayout()\n        layout.setContentsMargins(0, 0, 0, 0)\n        ch_exp.setLayout(layout)\n\n        ch = QGroupBox()\n        ch.setTitle(\"Channel\")\n        ch.setLayout(QHBoxLayout())\n        ch.layout().setContentsMargins(0, 0, 0, 0)\n        ch.layout().addWidget(self.channel)\n        layout.addWidget(ch)\n\n        exp = QGroupBox()\n        exp.setTitle(\"Exposure\")\n        exp.setLayout(QHBoxLayout())\n        exp.layout().setContentsMargins(0, 0, 0, 0)\n        exp.layout().addWidget(self.exposure)\n        layout.addWidget(exp)\n\n        self.layout().addWidget(self.preview)\n        self.layout().addWidget(ch_exp)\n        self.layout().addWidget(buttons)\n\n\nif __name__ == \"__main__\":\n    mmc = CMMCorePlus().instance()\n    mmc.loadSystemConfiguration()\n    app = QApplication([])\n    frame = ImageFrame()\n    frame.show()\n    mmc.snap()\n    app.exec_()\n</code></pre>"},{"location":"widgets/InstallWidget/","title":"InstallWidget","text":"This image generated from example code below."},{"location":"widgets/InstallWidget/#pymmcore_widgets.InstallWidget","title":"<code>InstallWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>Widget to manage installation of MicroManager.</p> <p>This widget will let you download and install a specific version of MicroManager from https://micro-manager.org/downloads. It will also manage the currently installed versions.</p>"},{"location":"widgets/InstallWidget/#example","title":"Example","text":"install_widget.py<pre><code>from qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import InstallWidget\n\napp = QApplication([])\nwdg = InstallWidget()\nwdg.show()\napp.exec()\n</code></pre>"},{"location":"widgets/LiveButton/","title":"LiveButton","text":"This image generated from example code below."},{"location":"widgets/LiveButton/#pymmcore_widgets.LiveButton","title":"<code>LiveButton</code>","text":"<p>               Bases: <code>QPushButton</code></p> <p>A Widget to create a two-state (on-off) live mode QPushButton.</p> <p>When pressed, a 'ContinuousSequenceAcquisition' is started or stopped and a pymmcore-plus signal <code>continuousSequenceAcquisitionStarted</code> or <code>sequenceAcquisitionStopped</code> is emitted.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>LiveButton</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets.LiveButton.button_text_off","title":"<code>button_text_off: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button text for when live mode is off.</p> <p>Default = \"Stop.\"</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets.LiveButton.button_text_on","title":"<code>button_text_on: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button text for when live mode is on.</p> <p>Default = \"Live.\"</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets.LiveButton.icon_color_off","title":"<code>icon_color_off: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button color for when live mode is off.</p> <p>Default = \"magenta\".</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets.LiveButton.icon_color_on","title":"<code>icon_color_on: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button color for when live mode is on.</p> <p>Default = (0. 255, 0).</p>"},{"location":"widgets/LiveButton/#example","title":"Example","text":"live_button.py<pre><code>\"\"\"Example usage of the LiveButton class.\n\nCheck also the 'image_widget.py' example to see the LiveButton\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import LiveButton\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nlive_btn = LiveButton()\nlive_btn.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/MDASequenceWidget/","title":"MDASequenceWidget","text":"This image generated from example code below."},{"location":"widgets/MDASequenceWidget/#pymmcore_widgets.MDASequenceWidget","title":"<code>MDASequenceWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A widget that provides a GUI to construct and edit a <code>useq.MDASequence</code>.</p> <p>This widget requires no connection to a microscope or core instance.  It strictly deals with loading and creating <code>useq-schema</code> <code>useq.MDASequence</code> objects.</p>"},{"location":"widgets/MDASequenceWidget/#pymmcore_widgets.MDASequenceWidget.load","title":"<code>load(file: str | Path | None = None) -&gt; None</code>","text":"<p>Load a <code>useq.MDASequence</code> from a file.</p>"},{"location":"widgets/MDASequenceWidget/#pymmcore_widgets.MDASequenceWidget.save","title":"<code>save(file: str | Path | None = None) -&gt; None</code>","text":"<p>Save the current <code>useq.MDASequence</code> to a file.</p>"},{"location":"widgets/MDASequenceWidget/#pymmcore_widgets.MDASequenceWidget.setValue","title":"<code>setValue(value: useq.MDASequence) -&gt; None</code>","text":"<p>Set the current value of the widget from a <code>useq.MDASequence</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>MDASequence</code> <p>The <code>useq.MDASequence</code> to set.</p> required"},{"location":"widgets/MDASequenceWidget/#pymmcore_widgets.MDASequenceWidget.value","title":"<code>value() -&gt; useq.MDASequence</code>","text":"<p>Return the current value of the widget as a <code>useq.MDASequence</code>.</p> <p>Returns:</p> Type Description <code>MDASequence</code> <p>The current <code>useq.MDASequence</code> value of the widget.</p>"},{"location":"widgets/MDASequenceWidget/#example","title":"Example","text":"mda_sequence_widget.py<pre><code>\"\"\"MDASequenceWidget is a widget for creating a useq.MDASequence object.\n\nIt has no awareness of the CMMCorePlus object, and does not have a \"run\" button.\n\"\"\"\n\nimport useq\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import MDASequenceWidget\n\napp = QApplication([])\n\nwdg = MDASequenceWidget()\nwdg.channels.setChannelGroups({\"Channel\": [\"DAPI\", \"FITC\"]})\nwdg.time_plan.setValue(useq.TIntervalLoops(interval=0.5, loops=11))\nwdg.valueChanged.connect(lambda: print(wdg.value()))\nwdg.show()\napp.exec()\n</code></pre>"},{"location":"widgets/MDAWidget/","title":"MDAWidget","text":"This image generated from example code below."},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget","title":"<code>MDAWidget</code>","text":"<p>               Bases: <code>MDASequenceWidget</code></p> <p>Main MDA Widget connected to a <code>pymmcore_plus.CMMCorePlus</code> instance.</p> <p>It provides a GUI to construct and run a <code>useq.MDASequence</code>.  Unlike <code>useq_widgets.MDASequenceWidget</code>, this widget is connected to a <code>pymmcore_plus.CMMCorePlus</code> instance, enabling awareness and control of the current state of the microscope.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget.execute_mda","title":"<code>execute_mda(output: Path | str | SupportsFrameReady | Sequence[Path | str | SupportsFrameReady] | None) -&gt; None</code>","text":"<p>Execute the MDA experiment corresponding to the current value.</p>"},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget.get_next_available_path","title":"<code>get_next_available_path(requested_path: Path) -&gt; Path</code>","text":"<p>Get the next available path.</p> <p>This method is called immediately before running an MDA to ensure that the file being saved does not overwrite an existing file. It is also called at the end of the experiment to update the save widget with the next available path.</p> <p>It may be overridden to provide custom behavior, but it should always return a Path object to a non-existing file or folder.</p> <p>The default behavior adds/increments a 3-digit counter at the end of the path (before the extension) if the path already exists.</p> <p>Parameters:</p> Name Type Description Default <code>requested_path</code> <code>Path</code> <p>The path we are requesting for use.</p> required"},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget.prepare_mda","title":"<code>prepare_mda() -&gt; bool | str | Path | None</code>","text":"<p>Prepare the MDA sequence experiment.</p> <p>Returns:</p> Type Description <code>bool</code> <p>False if MDA to be cancelled due to autofocus issue.</p> <code>str | Path</code> <p>Preparation successful, save path to be used for saving and saving active</p> <code>None</code> <p>Preparation successful, saving deactivated</p>"},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget.setValue","title":"<code>setValue(value: MDASequence) -&gt; None</code>","text":"<p>Get the current state of the widget as a <code>useq.MDASequence</code>.</p>"},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget.value","title":"<code>value() -&gt; MDASequence</code>","text":"<p>Set the current state of the widget from a <code>useq.MDASequence</code>.</p>"},{"location":"widgets/MDAWidget/#example","title":"Example","text":"mda_widget.py<pre><code>\"\"\"MDAWidget is a widget for creating and running a useq.MDASequence.\n\nIt is fully connected to the CMMCorePlus object, and has a \"run\" button.\n\"\"\"\n\nfrom contextlib import suppress\n\nimport useq\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import MDAWidget\n\nwith suppress(ImportError):\n    from rich import print\n\napp = QApplication([])\n\nCMMCorePlus.instance().loadSystemConfiguration()\n\nwdg = MDAWidget()\nwdg.channels.setChannelGroups({\"Channel\": [\"DAPI\", \"FITC\"]})\nwdg.time_plan.setValue(useq.TIntervalLoops(interval=0.5, loops=11))\nwdg.valueChanged.connect(lambda: print(wdg.value()))\nwdg.show()\napp.exec()\n</code></pre>"},{"location":"widgets/ObjectivesPixelConfigurationWidget/","title":"ObjectivesPixelConfigurationWidget","text":"This image generated from example code below."},{"location":"widgets/ObjectivesPixelConfigurationWidget/#pymmcore_widgets.ObjectivesPixelConfigurationWidget","title":"<code>ObjectivesPixelConfigurationWidget</code>","text":"<p>               Bases: <code>QDialog</code></p> <p>A Widget to define the pixel size configurations using the objective device.</p> <p>It requires to have installed on the microscope a motorzed objective turret and allows to set the pixel size using only the motorzed objective turret device properties. No other properties can be assigned to the pixel configuration. For this purpose, use the PixelConfigurationWidget which is more similar to the original micromanager pixel configuration widget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ObjectivesPixelConfigurationWidget/#example","title":"Example","text":"objectives_pixel_configuration_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ObjectivesPixelConfigurationWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npx_wdg = ObjectivesPixelConfigurationWidget()\npx_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ObjectivesWidget/","title":"ObjectivesWidget","text":"This image generated from example code below."},{"location":"widgets/ObjectivesWidget/#pymmcore_widgets.ObjectivesWidget","title":"<code>ObjectivesWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A QComboBox-based Widget to select the microscope objective.</p> <p>Parameters:</p> Name Type Description Default <code>objective_device</code> <code>str | None</code> <p>Device label for the micromanager objective device. By default, it will be guessed using the <code>CMMCorePlus.guessObjectiveDevices</code> method and a choice dialog will be presented if there are multiple options. This method looks for a micromanager device matching the default regex <code>re.compile(\"(.+)?(nosepiece|obj(ective)?)(turret)?s?\", re.IGNORECASE)</code>. To change the search pattern, set <code>CMMCorePlus.objective_device_pattern</code>.</p> <code>None</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ObjectivesWidget/#example","title":"Example","text":"objectives_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ObjectivesWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nobj_wdg = ObjectivesWidget()\nobj_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PixelConfigurationWidget/","title":"PixelConfigurationWidget","text":"This image generated from example code below."},{"location":"widgets/PixelConfigurationWidget/#pymmcore_widgets.PixelConfigurationWidget","title":"<code>PixelConfigurationWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to define the pixel size configurations.</p> <p>Each pixel size configuration can be linked to any device and property. However, it's important to note that all pixel size configurations must include the same devices and properties. The only variation allowed between different configurations is in the values of the device properties.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PixelConfigurationWidget/#pymmcore_widgets.PixelConfigurationWidget.setValue","title":"<code>setValue(value: list[PixelSizePreset]) -&gt; None</code>","text":"<p>Set the state of the widget describing the pixel configurations.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>list[PixelSizePreset][PixelSizePreset]</code> <p>The list of pixel configurations data to set.</p> required Example: <pre><code>input = [\n    PixelSizePreset(\n        name='Res10x',\n        settings=[Setting('Objective', 'Label', 'Nikon 10X S Fluor')],\n        pixel_size_um=1.0\n    ),\n    ...\n]\n</code></pre>"},{"location":"widgets/PixelConfigurationWidget/#pymmcore_widgets.PixelConfigurationWidget.value","title":"<code>value() -&gt; list[PixelSizePreset]</code>","text":"<p>Return the current state of the widget describing the pixel configurations.</p> <p>Returns:</p> Type Description <code>list[PixelSizePreset][PixelSizePreset]</code> <p>A list of pixel configurations data.</p> Example: <pre><code>output = [\n    PixelSizePreset(\n        name='Res10x',\n        settings=[Setting('Objective', 'Label', 'Nikon 10X S Fluor')],\n        pixel_size_um=1.0\n    ),\n    ...\n]\n</code></pre>"},{"location":"widgets/PixelConfigurationWidget/#example","title":"Example","text":"pixel_configuration_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PixelConfigurationWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npx_wdg = PixelConfigurationWidget()\npx_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PositionTable/","title":"PositionTable","text":"This image generated from example code below."},{"location":"widgets/PositionTable/#pymmcore_widgets.PositionTable","title":"<code>PositionTable</code>","text":"<p>               Bases: <code>DataTableWidget</code></p> <p>Table to edit a list of useq.Position.</p>"},{"location":"widgets/PositionTable/#pymmcore_widgets.PositionTable.load","title":"<code>load(file: str | Path | None = None) -&gt; None</code>","text":"<p>Load positions from a JSON file and set the table value.</p>"},{"location":"widgets/PositionTable/#pymmcore_widgets.PositionTable.save","title":"<code>save(file: str | Path | None = None) -&gt; None</code>","text":"<p>Save the current positions to a JSON file.</p>"},{"location":"widgets/PositionTable/#pymmcore_widgets.PositionTable.setValue","title":"<code>setValue(value: Sequence[useq.Position]) -&gt; None</code>","text":"<p>Set the current value of the table from a Sequence of useq.Position.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Sequence[Position]</code> <p>A Sequence of useq.Position.</p> required"},{"location":"widgets/PositionTable/#pymmcore_widgets.PositionTable.value","title":"<code>value(exclude_unchecked: bool = True, exclude_hidden_cols: bool = True) -&gt; Sequence[useq.Position]</code>","text":"<p>Return the current value of the table as a tuple of useq.Position.</p> <p>Note that <code>exclude_hidden_cols</code> has the result of:     - excluding the Z position in each of the Positions if       <code>include_z.isChecked()</code> is False     - excluding the AF offset in each of the Positions if       <code>af_per_position.isChecked()</code> is False</p> <p>Parameters:</p> Name Type Description Default <code>exclude_unchecked</code> <code>bool</code> <p>Exclude unchecked rows, by default True</p> <code>True</code> <code>exclude_hidden_cols</code> <code>bool</code> <p>Exclude hidden columns, by default True</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[Position, ...]</code> <p>A tuple of useq.Position.</p>"},{"location":"widgets/PositionTable/#example","title":"Example","text":"position_table.py<pre><code>\"\"\"Example usage of the PositionTable class.\n\nCheck also the 'mda_widget.py' example to see the PositionTable\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PositionTable\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npos_wdg = PositionTable(rows=3)\npos_wdg.resize(570, 200)\npos_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PresetsWidget/","title":"PresetsWidget","text":"This image generated from example code below."},{"location":"widgets/PresetsWidget/#pymmcore_widgets.PresetsWidget","title":"<code>PresetsWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to create a QCombobox containing the presets of the specified group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group name.</p> required <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PresetsWidget/#pymmcore_widgets.PresetsWidget.allowedValues","title":"<code>allowedValues() -&gt; tuple[str, ...]</code>","text":"<p>Return the allowed values for this widget.</p>"},{"location":"widgets/PresetsWidget/#pymmcore_widgets.PresetsWidget.setValue","title":"<code>setValue(value: str) -&gt; None</code>","text":"<p>Set the combobox to the given value.</p>"},{"location":"widgets/PresetsWidget/#pymmcore_widgets.PresetsWidget.value","title":"<code>value() -&gt; str</code>","text":"<p>Get current value.</p>"},{"location":"widgets/PresetsWidget/#example","title":"Example","text":"presets_widget.py<pre><code>\"\"\"Example Usage of the PresetsWidget class.\n\nIn this example all the available groups created in micromanager\nare displayed with a 'PresetsWidget'.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication, QFormLayout, QWidget\n\nfrom pymmcore_widgets import PresetsWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QFormLayout())\n\nfor group in mmc.getAvailableConfigGroups():\n    gp_wdg = PresetsWidget(group)\n    wdg.layout().addRow(f\"{group}:\", gp_wdg)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PropertiesWidget/","title":"PropertiesWidget","text":"This image generated from example code below."},{"location":"widgets/PropertiesWidget/#pymmcore_widgets.PropertiesWidget","title":"<code>PropertiesWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>Convenience container to control a specific set of PropertyWidgets.</p> <p>Properties can be filtered by a number of criteria, which are passed to <code>CMMCorePlus.iterProperties</code>.</p> <p>Parameters:</p> Name Type Description Default <code>property_type</code> <code>int | Sequence[int] | None</code> <p>PropertyType (or types) to filter by, by default all property types will be yielded.</p> <code>None</code> <code>property_name_pattern</code> <code>str | Pattern | None</code> <p>Property name to filter by, by default all property names will be yielded. May be a compiled regular expression or a string, in which case it will be compiled with <code>re.IGNORECASE</code>.</p> <code>None</code> <code>device_type</code> <code>DeviceType | None</code> <p>DeviceType to filter by, by default all device types will be yielded.</p> <code>None</code> <code>device_label</code> <code>str | None</code> <p>Device label to filter by, by default all device labels will be yielded.</p> <code>None</code> <code>has_limits</code> <code>bool | None</code> <p>If provided, only properties with <code>hasPropertyLimits</code> matching this value will be yielded.</p> <code>None</code> <code>is_read_only</code> <code>bool | None</code> <p>If provided, only properties with <code>isPropertyReadOnly</code> matching this value will be yielded.</p> <code>None</code> <code>is_sequenceable</code> <code>bool | None</code> <p>If provided only properties with <code>isPropertySequenceable</code> matching this value will be yielded.</p> <code>None</code>"},{"location":"widgets/PropertiesWidget/#pymmcore_widgets.PropertiesWidget.rebuild","title":"<code>rebuild() -&gt; None</code>","text":"<p>Rebuild the layout, populating based on current filters.</p>"},{"location":"widgets/PropertiesWidget/#example","title":"Example","text":"properties_widget.py<pre><code>\"\"\"The PropertiesWidget is a container for a set of PropertyWidgets.\n\nIt creates widgets for a set of different properties, filtered based on\nthe arguments to the constructor.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus, PropertyType\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PropertiesWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = PropertiesWidget(\n    # regex pattern to match property names\n    property_name_pattern=\"test\",\n    property_type={PropertyType.Float},\n    has_limits=True,\n)\n\nwdg.show()\napp.exec_()\n</code></pre>"},{"location":"widgets/PropertyBrowser/","title":"PropertyBrowser","text":"This image generated from example code below."},{"location":"widgets/PropertyBrowser/#pymmcore_widgets.PropertyBrowser","title":"<code>PropertyBrowser</code>","text":"<p>               Bases: <code>QDialog</code></p> <p>A Widget to browse and change properties of all devices.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PropertyBrowser/#example","title":"Example","text":"property_browser.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PropertyBrowser\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npb_wdg = PropertyBrowser()\npb_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PropertyWidget/","title":"PropertyWidget","text":"This image generated from example code below."},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget","title":"<code>PropertyWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A widget to display and control a specified mmcore device property.</p> <p>Parameters:</p> Name Type Description Default <code>device_label</code> <code>str</code> <p>Device label</p> required <code>prop_name</code> <code>str</code> <p>Property name</p> required <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <code>connect_core</code> <code>bool</code> <p>Whether to connect the widget to the core. If False, the widget will not update the core when the value changes. By default, True.</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the <code>device_label</code> is not loaded, or does not have a property <code>prop_name</code>.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.allowedValues","title":"<code>allowedValues() -&gt; tuple[str, ...]</code>","text":"<p>Return tuple of allowable values if property is categorical.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.connectCore","title":"<code>connectCore(mmcore: CMMCorePlus | None = None) -&gt; None</code>","text":"<p>Connect to core.</p> <p>Connect the widget to the core. This is the default state.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.deviceType","title":"<code>deviceType() -&gt; DeviceType</code>","text":"<p>Return property type.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.disconnectCore","title":"<code>disconnectCore() -&gt; None</code>","text":"<p>Disconnect from core.</p> <p>Disconnect the widget from the core. This will prevent the widget from updating the core when the value changes.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.isReadOnly","title":"<code>isReadOnly() -&gt; bool</code>","text":"<p>Return True if property is read only.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.propertyType","title":"<code>propertyType() -&gt; PropertyType</code>","text":"<p>Return property type.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.refresh","title":"<code>refresh() -&gt; None</code>","text":"<p>Update the value of the widget from mmcore.</p> <p>(If all goes well this shouldn't be necessary, but if a propertyChanged event is missed, this can be used).</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.setValue","title":"<code>setValue(value: Any) -&gt; None</code>","text":"<p>Set the current value of the widget (which should match mmcore).</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget.value","title":"<code>value() -&gt; Any</code>","text":"<p>Get value.</p> <p>Return the current value of the widget (which should match mmcore).</p>"},{"location":"widgets/PropertyWidget/#example","title":"Example","text":"property_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication, QFormLayout, QWidget\n\nfrom pymmcore_widgets import PropertyWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QFormLayout())\n\ndevs_pros = [\n    (\"Camera\", \"AllowMultiROI\"),\n    (\"Camera\", \"Binning\"),\n    (\"Camera\", \"CCDTemperature\"),\n]\n\nfor dev, prop in devs_pros:\n    prop_wdg = PropertyWidget(dev, prop)\n    wdg.layout().addRow(f\"{dev}-{prop}:\", prop_wdg)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ShuttersWidget/","title":"ShuttersWidget","text":"This image generated from example code below."},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget","title":"<code>ShuttersWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to control shutters and Micro-Manager autoshutter.</p> <p>Parameters:</p> Name Type Description Default <code>shutter_device</code> <code>str</code> <p>The shutter device Label.</p> required <code>autoshutter</code> <code>bool</code> <p>If True, a checkbox controlling the Micro-Manager autoshutter is added to the layout.</p> <code>True</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.button_text_closed","title":"<code>button_text_closed: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button text for when the shutter is closed.</p> <p>Default = ''</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.button_text_open","title":"<code>button_text_open: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button text for when the shutter is open.</p> <p>Default = ''</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.icon_closed","title":"<code>icon_closed: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the icon of the QPushButton when the shutter is closed.</p> <p>The icon_closed.setter icon string should be any key recognizable as a superqt fonticon (e.g. mdi6.abacus). Default = 'mdi:hexagon-slice-6' (https://github.com/templarian/MaterialDesign). Note that MDI6 is installed by default, you must install other fonts if you want to use them.</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.icon_color_closed","title":"<code>icon_color_closed: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button icon color for when the shutter is closed.</p> <p>Default = (183, 183, 183)</p> <p>COLOR_TYPE = Union[QColor, int, str, Qt.GlobalColor, tuple[int, int, int, int], tuple[int, int, int]]</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.icon_color_open","title":"<code>icon_color_open: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button icon color for when the shutter is open.</p> <p>Default = \"green\"</p> <p>COLOR_TYPE = Union[QColor, int, str, Qt.GlobalColor, tuple[int, int, int, int], tuple[int, int, int]]</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.icon_open","title":"<code>icon_open: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the icon of the QPushButton when the shutter is open.</p> <p>The icon_open.setter icon string should be any key recognizable as a superqt fonticon (e.g. mdi6.abacus). Default = 'mdi:hexagon-outline' (https://github.com/templarian/MaterialDesign). Note that MDI6 is installed by default, you must install other fonts if you want to use them.</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget.icon_size","title":"<code>icon_size: int</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button icon size.</p> <p>Default = 25</p>"},{"location":"widgets/ShuttersWidget/#example","title":"Example","text":"shutters_widget.py<pre><code>\"\"\"Example usage of the ShuttersWidget class.\n\nIn this example all the devices of type 'Shutter' that are loaded\nin micromanager are displayed with a 'ShuttersWidget'.\n\nThe autoshutter checkbox is displayed only with the last shutter device.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus, DeviceType\nfrom qtpy.QtWidgets import QApplication, QHBoxLayout, QWidget\n\nfrom pymmcore_widgets import ShuttersWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QHBoxLayout())\n\nshutter_dev_list = list(mmc.getLoadedDevicesOfType(DeviceType.Shutter))\n\nfor idx, shutter_dev in enumerate(shutter_dev_list):\n    # bool to display the autoshutter checkbox only with the last shutter\n    autoshutter = bool(idx &gt;= len(shutter_dev_list) - 1)\n    shutter = ShuttersWidget(shutter_dev, autoshutter=autoshutter)\n    shutter.button_text_open = shutter_dev\n    shutter.button_text_closed = shutter_dev\n    wdg.layout().addWidget(shutter)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/SnapButton/","title":"SnapButton","text":"This image generated from example code below."},{"location":"widgets/SnapButton/#pymmcore_widgets.SnapButton","title":"<code>SnapButton</code>","text":"<p>               Bases: <code>QPushButton</code></p> <p>Create a snap QPushButton.</p> <p>This button is linked to the <code>CMMCorePlus.snap</code> method. Once the button is clicked, an image is acquired and the <code>pymmcore-plus</code> signal <code>imageSnapped</code> is emitted.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>SnapButton</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/SnapButton/#example","title":"Example","text":"snap_button.py<pre><code>\"\"\"Example usage of the SnapButton class.\n\nCheck also the 'image_widget.py' example to see the SnapButton\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import SnapButton\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nsnap_btn = SnapButton()\nsnap_btn.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/StageWidget/","title":"StageWidget","text":"This image generated from example code below."},{"location":"widgets/StageWidget/#pymmcore_widgets.StageWidget","title":"<code>StageWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>A Widget to control a XY and/or a Z stage.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>Stage device.</p> required <code>levels</code> <code>int</code> <p>Number of \"arrow\" buttons per widget per direction, by default, 2.</p> <code>2</code> <code>absolute_positioning</code> <code>bool</code> <p>If True, the position displays can be edited to set absolute positions. If False, the position displays cannot be edited.</p> <code>False</code> <code>position_label_below</code> <code>bool</code> <p>If True, the position displays will appear below the move buttons. If False, the position displays will appear to the right of the move buttons.</p> <code>True</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/StageWidget/#pymmcore_widgets.StageWidget.enable_absolute_positioning","title":"<code>enable_absolute_positioning(enabled: bool) -&gt; None</code>","text":"<p>Toggles whether the position spinboxes can be edited by the user.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>If True, the position spinboxes will be enabled for user editing. If False, the position spinboxes will be disabled for user editing.</p> required"},{"location":"widgets/StageWidget/#pymmcore_widgets.StageWidget.setStep","title":"<code>setStep(step: float) -&gt; None</code>","text":"<p>Set the step size.</p>"},{"location":"widgets/StageWidget/#pymmcore_widgets.StageWidget.step","title":"<code>step() -&gt; float</code>","text":"<p>Return the current step size.</p>"},{"location":"widgets/StageWidget/#example","title":"Example","text":"stage_widget.py<pre><code>\"\"\"Example usage of the StageWidget class.\n\nIn this example all the devices of type 'Stage' and 'XYStage' that are loaded\nin micromanager are displayed with a 'StageWidget'.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus, DeviceType\nfrom qtpy.QtWidgets import QApplication, QGroupBox, QHBoxLayout, QWidget\n\nfrom pymmcore_widgets import StageWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg_layout = QHBoxLayout(wdg)\n\nstages = list(mmc.getLoadedDevicesOfType(DeviceType.XYStage))\nstages.extend(mmc.getLoadedDevicesOfType(DeviceType.Stage))\nfor stage in stages:\n    lbl = \"Z\" if mmc.getDeviceType(stage) == DeviceType.Stage else \"XY\"\n    bx = QGroupBox(f\"{lbl} Control\")\n    bx_layout = QHBoxLayout(bx)\n    bx_layout.setContentsMargins(0, 0, 0, 0)\n    bx_layout.addWidget(StageWidget(device=stage, position_label_below=True))\n    wdg_layout.addWidget(bx)\n\n\nwdg.show()\napp.exec()\n</code></pre>"},{"location":"widgets/TimePlanWidget/","title":"TimePlanWidget","text":"This image generated from example code below."},{"location":"widgets/TimePlanWidget/#pymmcore_widgets.TimePlanWidget","title":"<code>TimePlanWidget</code>","text":"<p>               Bases: <code>DataTableWidget</code></p> <p>Table to edit a useq.TimePlan.</p>"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets.TimePlanWidget.setValue","title":"<code>setValue(value: Any) -&gt; None</code>","text":"<p>Set the current value of the table from a useq.TimePlan.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>MultiPhaseTimePlan | TIntervalLoops | TDurationLoops | TIntervalDuration | None</code> <p>The useq.TimePlan to set.</p> required"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets.TimePlanWidget.value","title":"<code>value(exclude_unchecked: bool = True) -&gt; MultiPhaseTimePlan | TIntervalLoops | TIntervalDuration</code>","text":"<p>Return the current value of the table as a useq.TimePlan.</p> <p>Returns:</p> Type Description <code>MultiPhaseTimePlan | TIntervalLoops | TIntervalDuration</code> <p>The current useq.TimePlan value of the table.</p>"},{"location":"widgets/TimePlanWidget/#example","title":"Example","text":"time_plan_widget.py<pre><code>\"\"\"Example usage of the TimePlanWidget class.\n\nCheck also the 'mda_widget.py' example to see the TimePlanWidget\nused in combination of other widgets.\n\"\"\"\n\nimport useq\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import TimePlanWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nt_wdg = TimePlanWidget()\nt_wdg.setValue(useq.TIntervalLoops(interval=3, loops=5))\nt_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ZPlanWidget/","title":"ZPlanWidget","text":"This image generated from example code below."},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget","title":"<code>ZPlanWidget</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>Widget to edit a useq.ZPlan.</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.currentZRange","title":"<code>currentZRange() -&gt; float</code>","text":"<p>Return the current Z range in microns.</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.isGoUp","title":"<code>isGoUp() -&gt; bool</code>","text":"<p>Return True if the acquisition direction is up (bottom to top).</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.mode","title":"<code>mode() -&gt; Mode</code>","text":"<p>Return the current mode.</p> <p>One of \"top_bottom\", \"range_around\", or \"above_below\".</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.setGoUp","title":"<code>setGoUp(up: bool) -&gt; None</code>","text":"<p>Set the acquisition direction.</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.setMode","title":"<code>setMode(mode: Mode | Literal['top_bottom', 'range_around', 'above_below']) -&gt; None</code>","text":"<p>Set the current mode.</p> <p>One of \"top_bottom\", \"range_around\", or \"above_below\".</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>Mode | Literal['top_bottom', 'range_around', 'above_below'] | None</code> <p>The mode to set. By default, None. If None, the mode is determined by the sender().data(), for internal usage.</p> required"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.setSuggestedStep","title":"<code>setSuggestedStep(value: float | None) -&gt; None</code>","text":"<p>Set the suggested z step size and update the button text.</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.setValue","title":"<code>setValue(value: useq.ZAboveBelow | useq.ZRangeAround | useq.ZTopBottom) -&gt; None</code>","text":"<p>Set the current value of the widget from a useq.ZPlan.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>ZAboveBelow | ZRangeAround | ZTopBottom</code> <p>The useq.ZPlan to set.</p> required"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.suggestedStep","title":"<code>suggestedStep() -&gt; float | None</code>","text":"<p>Return suggested z step size.</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.useSuggestedStep","title":"<code>useSuggestedStep() -&gt; None</code>","text":"<p>Apply the suggested z step size to the step field.</p>"},{"location":"widgets/ZPlanWidget/#pymmcore_widgets.ZPlanWidget.value","title":"<code>value() -&gt; useq.ZAboveBelow | useq.ZRangeAround | useq.ZTopBottom | None</code>","text":"<p>Return the current value of the widget as a useq.ZPlan.</p> <p>Returns:</p> Type Description <code>ZAboveBelow | ZRangeAround | ZTopBottom | None</code> <code>The current [useq.ZPlan](https://pymmcore-plus.github.io/useq-schema/schema/axes/#z-plans)</code> <code>value of the widget.</code>"},{"location":"widgets/ZPlanWidget/#example","title":"Example","text":"z_plan_widget.py<pre><code>\"\"\"Example usage of the ZPlanWidget class.\n\nCheck also the 'mda_widget.py' example to see the ZPlanWidget\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ZPlanWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nz_wdg = ZPlanWidget()\nz_wdg.show()\n\napp.exec_()\n</code></pre>"}]}