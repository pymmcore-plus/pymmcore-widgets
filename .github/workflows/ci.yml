name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request: {}
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - run: uvx check-manifest

  test:
    name: ${{ matrix.os }} py${{ matrix.python-version }} ${{ matrix.backend }}
    runs-on: ${{ matrix.os }}
    env:
      UV_NO_SYNC: "1"
      UV_MANAGED_PYTHON: "1"
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest]
        python-version: ["3.9", "3.13"]
        backend: [PySide6, PyQt6]
        include:
          - os: windows-latest
            python-version: "3.10"
            backend: PySide2
          - os: windows-latest
            python-version: "3.11"
            backend: PySide6
          - os: windows-latest
            python-version: "3.12"
            backend: PyQt6
          - os: macos-13
            python-version: "3.10"
            backend: PySide2
          - os: macos-13
            python-version: "3.10"
            backend: PyQt5

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - uses: pymmcore-plus/setup-mm-test-adapters@main
      - uses: pyvista/setup-headless-display-action@v4

      - name: Install dependencies
        run: uv sync --no-dev --group test --extra ${{ matrix.backend }}

      - name: Test
        run: uv run coverage run -p -m pytest -v --color=yes

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: covreport-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.backend }}
          path: ./.coverage*
          include-hidden-files: true

  upload_coverage:
    if: always()
    needs: [test]
    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  test-pymmcore-gui:
    name: test pymmcore-gui
    runs-on: windows-latest
    env:
      UV_NO_SYNC: "1"
    steps:
      - uses: actions/checkout@v4
        with:
          repository: pymmcore-plus/pymmcore-gui
          fetch-depth: 0

      - uses: actions/checkout@v4
        with:
          path: pymmcore-widgets
          fetch-depth: 0

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - uses: pymmcore-plus/setup-mm-test-adapters@main
      - uses: pyvista/setup-headless-display-action@v4

      - name: Install dependencies
        run: |
          uv sync
          uv pip install ./pymmcore-widgets

      - name: Run pymmcore-gui tests
        run: uv run pytest -v --color=yes -W ignore

  test-napari-micromanager:
    name: test napari-micromanager
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          path: pymmcore-widgets
          fetch-depth: 0

      - uses: actions/checkout@v4
        with:
          repository: pymmcore-plus/napari-micromanager
          path: napari-micromanager
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: pymmcore-plus/setup-mm-test-adapters@main
      - uses: pyvista/setup-headless-display-action@v4

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -e ./pymmcore-widgets[PyQt5]
          python -m pip install -e ./napari-micromanager[test]

      - name: Run napari-micromanager tests
        run: python -m pytest -v --color=yes -W ignore
        working-directory: napari-micromanager

  deploy:
    name: Deploy
    needs: test
    if: ${{ github.repository == 'pymmcore-plus/pymmcore-widgets' && contains(github.ref, 'tags') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: ðŸ‘· Build
        run: uv build

      - name: ðŸš¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: "./dist/*"
